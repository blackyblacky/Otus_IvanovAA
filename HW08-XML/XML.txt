USE WideWorldImporters

/*
Примечания к заданиям 1, 2:
* Если с выгрузкой в файл будут проблемы, то можно сделать просто SELECT c результатом в виде XML. 
* Если у вас в проекте предусмотрен экспорт/импорт в XML, то можете взять свой XML и свои таблицы.
* Если с этим XML вам будет скучно, то можете взять любые открытые данные и импортировать их в таблицы (например, с https://data.gov.ru).
* Пример экспорта/импорта в файл https://docs.microsoft.com/en-us/sql/relational-databases/import-export/examples-of-bulk-import-and-export-of-xml-documents-sql-server
*/


/*
1. В личном кабинете есть файл StockItems.xml.
Это данные из таблицы Warehouse.StockItems.
Преобразовать эти данные в плоскую таблицу с полями, аналогичными Warehouse.StockItems.
Поля: StockItemName, SupplierID, UnitPackageID, OuterPackageID, QuantityPerOuter, TypicalWeightPerUnit, LeadTimeDays, IsChillerStock, TaxRate, UnitPrice 

Загрузить эти данные в таблицу Warehouse.StockItems: 
существующие записи в таблице обновить, отсутствующие добавить (сопоставлять записи по полю StockItemName). 

Сделать два варианта: с помощью OPENXML и через XQuery.
*/

CREATE TABLE #StockItemsTemp (
    StockItemName VARCHAR(100),
    SupplierID INT,
    UnitPackageID INT,
    OuterPackageID INT,
    QuantityPerOuter INT,
    TypicalWeightPerUnit DECIMAL(18,3),
    LeadTimeDays INT,
    IsChillerStock BIT,
    TaxRate DECIMAL(18,3),
    UnitPrice DECIMAL(18,2)
)
DECLARE @xml XML
SELECT @xml = BulkColumn
FROM OPENROWSET(BULK 'C:\SQL2022\StockItems.xml', SINGLE_BLOB) x

DECLARE @hDoc INT
EXEC sp_xml_preparedocument @hDoc OUTPUT, @xml

INSERT INTO #StockItemsTemp (
    StockItemName,
    SupplierID,
    UnitPackageID,
    OuterPackageID,
    QuantityPerOuter,
    TypicalWeightPerUnit,
    LeadTimeDays,
    IsChillerStock,
    TaxRate,
    UnitPrice
)
SELECT StockItemName, SupplierID, UnitPackageID, OuterPackageID, QuantityPerOuter,
    TypicalWeightPerUnit, LeadTimeDays, IsChillerStock, TaxRate, UnitPrice
FROM OPENXML(@hDoc, 'StockItems/Item', 2)
WITH (
    [StockItemName] VARCHAR(100) '@Name',
    [SupplierID] INT 'SupplierID',
    [UnitPackageID] INT 'Package/UnitPackageID',
    [OuterPackageID] INT 'Package/OuterPackageID',
    [QuantityPerOuter] INT 'Package/QuantityPerOuter',
    [TypicalWeightPerUnit] DECIMAL(18,3) 'Package/QuantityPerOuter',
    [LeadTimeDays] INT 'LeadTimeDays',
    [IsChillerStock] BIT 'IsChillerStock',
    [TaxRate] DECIMAL(18,3) 'TaxRate',
    [UnitPrice] DECIMAL(18,2) 'UnitPrice'
)

EXEC sp_xml_removedocument @hDoc

MERGE Warehouse.StockItems AS target
USING #StockItemsTemp AS source
ON (target.StockItemName = source.StockItemName COLLATE SQL_Latin1_General_CP1_CI_AS)
WHEN MATCHED THEN
    UPDATE SET
        target.SupplierID = source.SupplierID,
        target.UnitPackageID = source.UnitPackageID,
        target.OuterPackageID = source.OuterPackageID,
        target.QuantityPerOuter = source.QuantityPerOuter,
        target.TypicalWeightPerUnit = source.TypicalWeightPerUnit,
        target.LeadTimeDays = source.LeadTimeDays,
        target.IsChillerStock = source.IsChillerStock,
        target.TaxRate = source.TaxRate,
        target.UnitPrice = source.UnitPrice,
		target.LastEditedBy = 1
WHEN NOT MATCHED THEN
    INSERT (
        StockItemName,
        SupplierID,
        UnitPackageID,
        OuterPackageID,
        QuantityPerOuter,
        TypicalWeightPerUnit,
        LeadTimeDays,
        IsChillerStock,
        TaxRate,
        UnitPrice,
		LastEditedBy
   ) VALUES (
        source.StockItemName,
        source.SupplierID,
        source.UnitPackageID,
        source.OuterPackageID,
        source.QuantityPerOuter,
        source.TypicalWeightPerUnit,
        source.LeadTimeDays,
        source.IsChillerStock,
        source.TaxRate,
        source.UnitPrice,
		1
   );

DROP TABLE #StockItemsTemp;



--XQuery
CREATE TABLE #StockItemsTemp1 (
    StockItemName VARCHAR(100),
    SupplierID INT,
    UnitPackageID INT,
    OuterPackageID INT,
    QuantityPerOuter INT,
    TypicalWeightPerUnit DECIMAL(18,3),
    LeadTimeDays INT,
    IsChillerStock BIT,
    TaxRate DECIMAL(18,3),
    UnitPrice DECIMAL(18,2)
)
DECLARE @xml1 XML
SELECT @xml1 = BulkColumn
FROM OPENROWSET(BULK 'C:\SQL2022\StockItems.xml', SINGLE_BLOB) x

DECLARE @hDoc1 INT
EXEC sp_xml_preparedocument @hDoc1 OUTPUT, @xml1

INSERT INTO #StockItemsTemp1 (
    StockItemName,
    SupplierID,
    UnitPackageID,
    OuterPackageID,
    QuantityPerOuter,
    TypicalWeightPerUnit,
    LeadTimeDays,
    IsChillerStock,
    TaxRate,
    UnitPrice
)
SELECT x.StockItems.value('(@Name)', 'NVARCHAR(100)') AS [StockItemName],
                    x.StockItems.value('(SupplierID)[1]', 'INT') AS [SupplierID],
                    x.StockItems.value('(Package/UnitPackageID)[1]', 'INT') AS [UnitPackageID],
                    x.StockItems.value('(Package/OuterPackageID)[1]', 'INT') AS [OuterPackageID],
                    x.StockItems.value('(Package/QuantityPerOuter)[1]', 'INT') AS [QuantityPerOuter],
                    x.StockItems.value('(Package/TypicalWeightPerUnit)[1]', 'DECIMAL(18,3)') AS [TypicalWeightPerUnit],
                    x.StockItems.value('(LeadTimeDays)[1]', 'INT') AS [LeadTimeDays],
                    x.StockItems.value('(IsChillerStock)[1]', 'BIT') AS [IsChillerStock],
                    x.StockItems.value('(TaxRate)[1]', 'DECIMAL(18,3)') AS [TaxRate],
                    x.StockItems.value('(UnitPrice)[1]', 'DECIMAL(18,2)') AS [UnitPrice]
 FROM @xml1.nodes(N'/StockItems/Item') AS X(StockItems)

select * from #StockItemsTemp1

EXEC sp_xml_removedocument @hDoc1


MERGE Warehouse.StockItems AS Target
USING #StockItemsTemp1 AS Source
ON Target.StockItemName = Source.StockItemName COLLATE SQL_Latin1_General_CP1_CI_AS
WHEN MATCHED THEN
    UPDATE SET Target.SupplierID = Source.SupplierID,
			   Target.UnitPackageID = Source.UnitPackageID, 
               Target.OuterPackageID = Source.OuterPackageID, 
               Target.QuantityPerOuter = Source.QuantityPerOuter, 
               Target.TypicalWeightPerUnit = Source.TypicalWeightPerUnit, 
               Target.LeadTimeDays = Source.LeadTimeDays, 
               Target.IsChillerStock = Source.IsChillerStock, 
               Target.TaxRate = Source.TaxRate, 
               Target.UnitPrice = Source.UnitPrice,
			   target.LastEditedBy = 1
WHEN NOT MATCHED THEN
    INSERT (StockItemName, SupplierID, UnitPackageID, OuterPackageID, QuantityPerOuter, TypicalWeightPerUnit, LeadTimeDays, IsChillerStock, TaxRate, UnitPrice,LastEditedBy)
    VALUES (Source.StockItemName, Source.SupplierID, Source.UnitPackageID, Source.OuterPackageID, Source.QuantityPerOuter, Source.TypicalWeightPerUnit, Source.LeadTimeDays, Source.IsChillerStock, Source.TaxRate, Source.UnitPrice,1);

drop table #StockItemsTemp1


/*
2. Выгрузить данные из таблицы StockItems в такой же xml-файл, как StockItems.xml
*/
select StockItemName as [@Name]
		,SupplierID as SupplierID
		,UnitPackageID as [Package/UnitPackageID]
		,OuterPackageID as [Package/OuterPackageID]
		,QuantityPerOuter as [Package/QuantityPerOuter]
		,TypicalWeightPerUnit as [Package/TypicalWeightPerUnit]
		,LeadTimeDays as [LeadTimeDays]
		,IsChillerStock as [IsChillerStock]
		,TaxRate as [TaxRate]
		,UnitPrice as [UnitPrice] 
from Warehouse.StockItems 
for xml path('Item'), root('StockItems')


DECLARE @xm NVARCHAR(3900)
set @xm ='bcp "'+ N'select StockItemName as [@Name],SupplierID as SupplierID,UnitPackageID as [Package/UnitPackageID],OuterPackageID as [Package/OuterPackageID],QuantityPerOuter as [Package/QuantityPerOuter],TypicalWeightPerUnit as [Package/TypicalWeightPerUnit],LeadTimeDays as [LeadTimeDays],IsChillerStock as [IsChillerStock],TaxRate as [TaxRate],UnitPrice as [UnitPrice] from WideWorldImporters.Warehouse.StockItems for xml path(''Item''),root(''StockItems''), type'+'" queryout "C:\Ivanov\StockItems.xml" -T -w -t, -S DESKTOP-457DR4F'
EXEC xp_cmdshell @xm

/*
3. В таблице Warehouse.StockItems в колонке CustomFields есть данные в JSON.
Написать SELECT для вывода:
- StockItemID
- StockItemName
- CountryOfManufacture (из CustomFields)
- FirstTag (из поля CustomFields, первое значение из массива Tags)
*/

SELECT 
    StockItemID, 
    StockItemName,
    JSON_VALUE(CustomFields, '$.CountryOfManufacture') AS CountryOfManufacture,
    JSON_VALUE(CustomFields, '$.Tags[0]') AS FirstTag
FROM Warehouse.StockItems;

/*
4. Найти в StockItems строки, где есть тэг "Vintage".
Вывести: 
- StockItemID
- StockItemName
- (опционально) все теги (из CustomFields) через запятую в одном поле

Тэги искать в поле CustomFields, а не в Tags.
Запрос написать через функции работы с JSON.
Для поиска использовать равенство, использовать LIKE запрещено.

Должно быть в таком виде:
... where ... = 'Vintage'

Так принято не будет:
... where ... Tags like '%Vintage%'
... where ... CustomFields like '%Vintage%' 
*/

SELECT StockItemID,StockItemName
FROM Warehouse.StockItems 
WHERE JSON_EXTRACT(CustomFields, '$.Vintage') = 'Vintage';
