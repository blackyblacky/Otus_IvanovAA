USE WideWorldImporters

/*
Примечания к заданиям 1, 2:
* Если с выгрузкой в файл будут проблемы, то можно сделать просто SELECT c результатом в виде XML. 
* Если у вас в проекте предусмотрен экспорт/импорт в XML, то можете взять свой XML и свои таблицы.
* Если с этим XML вам будет скучно, то можете взять любые открытые данные и импортировать их в таблицы (например, с https://data.gov.ru).
* Пример экспорта/импорта в файл https://docs.microsoft.com/en-us/sql/relational-databases/import-export/examples-of-bulk-import-and-export-of-xml-documents-sql-server
*/


/*
1. В личном кабинете есть файл StockItems.xml.
Это данные из таблицы Warehouse.StockItems.
Преобразовать эти данные в плоскую таблицу с полями, аналогичными Warehouse.StockItems.
Поля: StockItemName, SupplierID, UnitPackageID, OuterPackageID, QuantityPerOuter, TypicalWeightPerUnit, LeadTimeDays, IsChillerStock, TaxRate, UnitPrice 

Загрузить эти данные в таблицу Warehouse.StockItems: 
существующие записи в таблице обновить, отсутствующие добавить (сопоставлять записи по полю StockItemName). 

Сделать два варианта: с помощью OPENXML и через XQuery.
*/

DECLARE @xml XML

SELECT @xml = BulkColumn
FROM OPENROWSET(BULK 'C:\Ivanov\StockItems.xml', SINGLE_NCLOB) AS x;

DECLARE @doc int

EXEC sp_xml_preparedocument @doc OUTPUT, @xml;

MERGE Warehouse.StockItems AS Target
USING 
(
SELECT DISTINCT StockItemName, SupplierID, UnitPackageID, OuterPackageID, QuantityPerOuter, TypicalWeightPerUnit, LeadTimeDays, IsChillerStock, TaxRate, UnitPrice
FROM OPENXML(@doc, '/Root/StockItem',2)
WITH (StockItemName NVARCHAR(100) '@StockItemName', 
          SupplierID INT '@SupplierID', 
          UnitPackageID INT '@UnitPackageID', 
          OuterPackageID INT '@OuterPackageID', 
          QuantityPerOuter INT '@QuantityPerOuter', 
          TypicalWeightPerUnit DECIMAL(18,3) '@TypicalWeightPerUnit', 
          LeadTimeDays INT '@LeadTimeDays', 
          IsChillerStock BIT '@IsChillerStock', 
          TaxRate DECIMAL(18,3) '@TaxRate', 
          UnitPrice DECIMAL(18,2) '@UnitPrice'
          )
) AS Source
ON Target.StockItemName = Source.StockItemName
WHEN MATCHED THEN
    UPDATE SET Target.SupplierID = Source.SupplierID, 
               Target.UnitPackageID = Source.UnitPackageID, 
               Target.OuterPackageID = Source.OuterPackageID, 
               Target.QuantityPerOuter = Source.QuantityPerOuter, 
               Target.TypicalWeightPerUnit = Source.TypicalWeightPerUnit, 
               Target.LeadTimeDays = Source.LeadTimeDays, 
               Target.IsChillerStock = Source.IsChillerStock, 
               Target.TaxRate = Source.TaxRate, 
               Target.UnitPrice = Source.UnitPrice
WHEN NOT MATCHED THEN
    INSERT (StockItemName, SupplierID, UnitPackageID, OuterPackageID, QuantityPerOuter, TypicalWeightPerUnit, LeadTimeDays, IsChillerStock, TaxRate, UnitPrice)
    VALUES (Source.StockItemName, Source.SupplierID, Source.UnitPackageID, Source.OuterPackageID, Source.QuantityPerOuter, Source.TypicalWeightPerUnit, Source.LeadTimeDays, Source.IsChillerStock, Source.TaxRate, Source.UnitPrice);

EXEC sp_xml_removedocument @doc;

--XQuery

DECLARE @xml XML

SELECT @xml = BulkColumn
FROM OPENROWSET(BULK 'C:\Ivanov\StockItems.xml', SINGLE_NCLOB) AS x;

MERGE Warehouse.StockItems AS Target
USING (
    SELECT DISTINCT StockItem.value('(StockItemName)[1]', 'NVARCHAR(MAX)') AS StockItemName,
                    StockItem.value('(SupplierID)[1]', 'INT') AS SupplierID,
                    StockItem.value('(UnitPackageID)[1]', 'INT') AS UnitPackageID,
                    StockItem.value('(OuterPackageID)[1]', 'INT') AS OuterPackageID,
                    StockItem.value('(QuantityPerOuter)[1]', 'INT') AS QuantityPerOuter,
                    StockItem.value('(TypicalWeightPerUnit)[1]', 'DECIMAL(18,2)') AS TypicalWeightPerUnit,
                    StockItem.value('(LeadTimeDays)[1]', 'INT') AS LeadTimeDays,
                    StockItem.value('(IsChillerStock)[1]', 'BIT') AS IsChillerStock,
                    StockItem.value('(TaxRate)[1]', 'DECIMAL(18,2)') AS TaxRate,
                    StockItem.value('(UnitPrice)[1]', 'DECIMAL(18,2)') AS UnitPrice
    FROM @xml.nodes('/Root/StockItem') AS X(StockItem)
) AS Source
ON Target.StockItemName = Source.StockItemName
WHEN MATCHED THEN
    UPDATE SET Target.SupplierID = Source.SupplierID, 
               Target.UnitPackageID = Source.UnitPackageID, 
               Target.OuterPackageID = Source.OuterPackageID, 
               Target.QuantityPerOuter = Source.QuantityPerOuter, 
               Target.TypicalWeightPerUnit = Source.TypicalWeightPerUnit, 
               Target.LeadTimeDays = Source.LeadTimeDays, 
               Target.IsChillerStock = Source.IsChillerStock, 
               Target.TaxRate = Source.TaxRate, 
               Target.UnitPrice = Source.UnitPrice
WHEN NOT MATCHED THEN
    INSERT (StockItemName, SupplierID, UnitPackageID, OuterPackageID, QuantityPerOuter, TypicalWeightPerUnit, LeadTimeDays, IsChillerStock, TaxRate, UnitPrice)
    VALUES (Source.StockItemName, Source.SupplierID, Source.UnitPackageID, Source.OuterPackageID, Source.QuantityPerOuter, Source.TypicalWeightPerUnit, Source.LeadTimeDays, Source.IsChillerStock, Source.TaxRate, Source.UnitPrice);


/*
2. Выгрузить данные из таблицы StockItems в такой же xml-файл, как StockItems.xml
*/

exec master..xp_cmdshell 'bcp "[WideWorldImporters].warehouse.stockitems" out  "C:\Ivanov\Customers1.txt" -T -w -t, -S SERV-WMS1'


/*
3. В таблице Warehouse.StockItems в колонке CustomFields есть данные в JSON.
Написать SELECT для вывода:
- StockItemID
- StockItemName
- CountryOfManufacture (из CustomFields)
- FirstTag (из поля CustomFields, первое значение из массива Tags)
*/

SELECT 
    StockItemID, 
    StockItemName,
    JSON_VALUE(CustomFields, '$.CountryOfManufacture') AS CountryOfManufacture,
    JSON_VALUE(CustomFields, '$.Tags[0]') AS FirstTag
FROM Warehouse.StockItems;

/*
4. Найти в StockItems строки, где есть тэг "Vintage".
Вывести: 
- StockItemID
- StockItemName
- (опционально) все теги (из CustomFields) через запятую в одном поле

Тэги искать в поле CustomFields, а не в Tags.
Запрос написать через функции работы с JSON.
Для поиска использовать равенство, использовать LIKE запрещено.

Должно быть в таком виде:
... where ... = 'Vintage'

Так принято не будет:
... where ... Tags like '%Vintage%'
... where ... CustomFields like '%Vintage%' 
*/


SELECT StockItemID, StockItemName, CustomFields,
      JSON_VALUE(CustomFields, '$.Tags[0]') AS FirstTag
FROM Warehouse.StockItems
WHERE JSON_VALUE(CustomFields, '$.Tags[0]') = 'Vintage'


