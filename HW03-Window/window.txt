USE WideWorldImporters
/*
1. Сделать расчет суммы продаж нарастающим итогом по месяцам с 2015 года 
(в рамках одного месяца он будет одинаковый, нарастать будет в течение времени выборки).
Выведите: id продажи, название клиента, дату продажи, сумму продажи, сумму нарастающим итогом

Пример:
-------------+----------------------------
Дата продажи | Нарастающий итог по месяцу
-------------+----------------------------
 2015-01-29   | 4801725.31
 2015-01-30	 | 4801725.31
 2015-01-31	 | 4801725.31
 2015-02-01	 | 9626342.98
 2015-02-02	 | 9626342.98
 2015-02-03	 | 9626342.98
Продажи можно взять из таблицы Invoices.
Нарастающий итог должен быть без оконной функции.
*/

select i.InvoiceID, c.CustomerName, i.InvoiceDate, sum(il.unitprice * il.Quantity) as Summa, 
(
	select top(1) sum(ll.UnitPrice*ll.Quantity)
	from Sales.InvoiceLines ll
	where ll.InvoiceID = il.InvoiceID and ll.InvoiceLineID <= il.InvoiceLineID
	group by ll.InvoiceID,ll.InvoiceLineID, il.InvoiceID,il.InvoiceLineID
) as RunningTotal
from Sales.Invoices i
join Sales.InvoiceLines il
on il.InvoiceID = i.InvoiceID
join Sales.Customers c
on c.CustomerID = i.CustomerID
where year(i.InvoiceDate) = '2015' and i.InvoiceDate between '20150311' and '20150328'
group by i.InvoiceID,i.InvoiceDate, c.CustomerName, il.unitprice ,il.Quantityty


/*
2. Сделайте расчет суммы нарастающим итогом в предыдущем запросе с помощью оконной функции.
   Сравните производительность запросов 1 и 2 с помощью set statistics time, io on
*/
SET STATISTICS TIME ON

select i.InvoiceID, c.CustomerName, i.InvoiceDate, sum(il.unitprice * il.Quantity), 
		sum(il.unitprice*il.Quantity) over(order by il.unitprice, i.InvoiceID) as nar
from Sales.Invoices i
join Sales.InvoiceLines il
on il.InvoiceID = i.InvoiceID
join Sales.Customers c
on c.CustomerID = i.CustomerID
where year(i.InvoiceDate) = '2015' and i.InvoiceDate between '20150311' and '20150328'
group by i.InvoiceID,i.InvoiceDate, c.CustomerName, il.unitprice ,il.Quantity

SET STATISTICS TIME OFF


/*
3. Вывести список 2х самых популярных продуктов (по количеству проданных) 
в каждом месяце за 2016 год (по 2 самых популярных продукта в каждом месяце).
*/
with Ccte as 
(
select month(i.InvoiceDate) as Mon,il.Description, 
row_number() over (partition by month(i.InvoiceDate) order by sum(il.Quantity) desc) as RN
from Sales.InvoiceLines il
join Sales.Invoices i 
on i.InvoiceID = il.InvoiceID
where year(i.InvoiceDate) = 2016
group by i.InvoiceDate, il.Description
)
select * from Ccte
where Ccte.RN < 3


/*
4. Функции одним запросом
Посчитайте по таблице товаров (в вывод также должен попасть ид товара, название, брэнд и цена):
* пронумеруйте записи по названию товара, так чтобы при изменении буквы алфавита нумерация начиналась заново
* посчитайте общее количество товаров и выведете полем в этом же запросе
* посчитайте общее количество товаров в зависимости от первой буквы названия товара
* отобразите следующий id товара исходя из того, что порядок отображения товаров по имени 
* предыдущий ид товара с тем же порядком отображения (по имени)
* названия товара 2 строки назад, в случае если предыдущей строки нет нужно вывести "No items"
* сформируйте 30 групп товаров по полю вес товара на 1 шт

Для этой задачи НЕ нужно писать аналог без аналитических функций.
*/

select StockItemID, StockItemName,Brand, UnitPrice, 
row_number() over (partition by left(StockItemName,1) order by StockItemID) as 'Num',
count(*) over(partition by QuantityPerOuter order by QuantityPerOuter) as 'Kol',
COUNT(*) OVER (PARTITION BY LEFT(StockItemName, 1) ORDER BY LEFT(StockItemName, 1)) as CountByFirstCharName,
lead(StockItemID) over (order by StockItemName) as 'NextID',
lag(StockItemID) over (order by StockItemName)as 'LastID',
lag(StockItemName, 2, 'No items') over (order by StockItemName) as 'LastID2',
NTILE(30) over (partition by TypicalWeightPerUnit order by TypicalWeightPerUnit) as 'Group'
from Warehouse.StockItems
group by StockItemID, StockItemName, UnitPrice, Brand, TypicalWeightPerUnit, QuantityPerOuter
order by NextID,LastID


/*
5. По каждому сотруднику выведите последнего клиента, которому сотрудник что-то продал.
   В результатах должны быть ид и фамилия сотрудника, ид и название клиента, дата продажи, сумму сделки.
*/

select top(1) with ties p.PersonID, p.FullName, c.CustomerID, c.CustomerName, i.InvoiceDate, SUM(il.UnitPrice*il.Quantity) as 'Sum'
from Sales.Invoices i 
join Application.People p 
on p.PersonID = i.SalespersonPersonID
join Sales.Customers c
on c.CustomerID = i.CustomerID
left join Sales.InvoiceLines il
on il.InvoiceID = i.InvoiceID
group by p.PersonID, p.FullName, c.CustomerID, c.CustomerName, i.InvoiceDate, SalespersonPersonID
order by ROW_NUMBER() over(partition by i.SalespersonPersonID order by p.FullName)

/*
6. Выберите по каждому клиенту два самых дорогих товара, которые он покупал.
В результатах должно быть ид клиета, его название, ид товара, цена, дата покупки.
*/

select top(2) with ties c.CustomerID, c.CustomerName, il.StockItemID, il.UnitPrice, i.InvoiceDate
from Sales.Invoices i
join Sales.Customers c
on c.CustomerID = i.CustomerID
join Sales.InvoiceLines il
on il.InvoiceID = i.InvoiceID
order by ROW_NUMBER() over(partition by il.UnitPrice,c.CustomerID order by c.CustomerID)

Опционально можете для каждого запроса без оконных функций сделать вариант запросов с оконными функциями и сравнить их производительность. 
